package Pelephone::Storage;  

use strict;
use warnings;
use Pelephone::System ;

$| = 1 ;

BEGIN {
	use Exporter   ();
	our ($VERSION, @ISA, @EXPORT, @EXPORT_OK, %EXPORT_TAGS);

	# set the version for version checking
	$VERSION     = 1.00;

	@ISA         = qw(Exporter);
	@EXPORT      = qw(&DGExist &GetBCV_Devices &Get_Master_Device_Group
					  &MoveDevices &GetDGStatus &GetDGStatusCascaded &GetDGDiffrence);
	%EXPORT_TAGS = ( );     # eg: TAG => [ qw!name1 name2! ],

	# your exported package globals go here,
	# as well as any optionally exported functions
	@EXPORT_OK   = qw($SYMDG $SYMLD $SYMRDF);
}

our @EXPORT_OK;

our $SYMDG ;
our $SYMLD ;
our $SYMRDF ;

our $SYMCLI_DIR ;

$SYMCLI_DIR = "/usr/symcli/bin" ;

$SYMDG  = $SYMCLI_DIR . "/symdg" ;
$SYMLD  = $SYMCLI_DIR . "/symld" ;
$SYMRDF = $SYMCLI_DIR . "/symrdf" ;

our %SymDGValidStatus ;

$SymDGValidStatus{"Split"} = 0 ;
$SymDGValidStatus{"SyncInProg"} = 0 ;
$SymDGValidStatus{"Synchronized"} = 0 ;

END { }       # module clean-up code here (global destructor)

#-----------------------------------------------------------------------------#
# This function accept DeviceGroupName & HostName, and check if the           #
# DeviceGroupName exist on the HostName.                                      #
#-----------------------------------------------------------------------------#
sub DGExist($$) {
	my $GroupName = shift ;		chomp $GroupName ;
	my $Host = shift ;			chomp $Host ;
	my $cmd = "$SYMDG list | grep  $GroupName > /dev/null 2>&1" ;
	RunProgram($Host, "$cmd") ;
	return $? ;
}
sub GetBCV_Devices($$) {
	my $Group = shift ;		chomp $Group ;
	my $Host = shift ;		chomp $Host ;
	my $cmd = "$SYMDG list | grep $Group | awk '{print \$7}'" ;
	RunProgram($Host, "$cmd") ;
	my @Result = GetCommandResult() ;
	return $Result[0] ;
}
sub Get_Master_Device_Group($$$) {
	my $Group = shift ;		chomp $Group ;
	my $Host = shift ;		chomp $Host ;
	my $Prefix = shift ;	chomp $Prefix ;
	my $cmd = "$SYMDG list | grep $Prefix | awk '{print \$1,\$5}' | grep  -v \" 0\" | awk '{print \$1}'" ;
	RunProgram($Host, "$cmd") ;
	my @Result = GetCommandResult() ;
	return $Result[0] ;
}
sub MoveDevices($$$) {
	my $FromGroup = shift ;		chomp $FromGroup ;
	my $ToGroup = shift ;		chomp $ToGroup ;
	my $Host = shift ;			chomp $Host ;
	my $cmd = "$SYMLD -g $FromGroup moveall $ToGroup" ;
	ReTry ($Host, "$cmd") ;
	return $? ;
}
sub GetDGStatus($) {
	my $GroupCmd = shift ;			chomp $GroupCmd ;
	my $cmd="$GroupCmd query" ;
	my $ExitCode = RunProgram ($main::RunnigHost, "$cmd") ;
	my @Res = GetCommandResult() ;
	my $TotalDevs = 0 ;
	my $TotalPrecent = 0 ;
	$SymDGValidStatus{"Split"} = 0 ;
	$SymDGValidStatus{"SyncInProg"} = 0 ;
	$SymDGValidStatus{"Synchronized"} = 0 ;
	$SymDGValidStatus{"Copied"} = 0 ;
	$SymDGValidStatus{"PreCopy"} = 0 ;
	$SymDGValidStatus{"Recreated"} = 0 ;
	$SymDGValidStatus{"Consistent"} = 0 ;
	foreach my $line (@Res) {
		if ($line =~ /^N\/A/) {
			$TotalDevs ++ ;
			my ($data, $type) = (split ('\s+', $line))[-1,-2] ;
			if ( $GroupCmd =~ /symclone/ ) {
				$SymDGValidStatus{"$type"} ++ ;
				$TotalPrecent = $TotalPrecent + $data ;
			} else {
				if (exists $SymDGValidStatus{"$data"}) {
					$SymDGValidStatus{"$data"} ++ ;
				}else{
					print "There is problem with the group status !!!\n" ;
					exit 1 ;
				}
			}
		}
	}
	if ( $GroupCmd =~ /symclone/ ) {
		my $Prec = $TotalPrecent / $TotalDevs ;
		print "======= $Prec ====== $TotalDevs ====== $SymDGValidStatus{\"Copied\"} ======$SymDGValidStatus{\"PreCopy\"} ==\n" ;
		if ( $Prec == 100 ) {  
			if ( $SymDGValidStatus{"Copied"} == $TotalDevs) { 
				return 1 ; # Split Mode
			}else{
				return 2 ; # Synchronized Mode
			}  
		}
		if ( $Prec > 95 )   {  return 2 ; }  # Synchronized Mode
		if ( $Prec < 90 )   {  return 3 ; }  # SyncInProg Mode
	} else { #SRDF
		if ($SymDGValidStatus{"Split"} == $TotalDevs){
			return 1 ; # Split Mode
		}
		if ($SymDGValidStatus{"Synchronized"} == $TotalDevs){
			return 2 ; # Synchronized Mode
		}
		if ($SymDGValidStatus{"Consistent"} == $TotalDevs){
			return 2; # ASYNC Synchronized Mode
		}
		if (($SymDGValidStatus{"SyncInProg"} + $SymDGValidStatus{"Synchronized"}) == $TotalDevs){
			return 3 ;# SyncInProg Mode
		}
		return 9 ;                                                                                                # Invalid Mode
	}
}
sub GetDGStatusCascaded($) {
	my $GroupCmd = shift ;			chomp $GroupCmd ;
	my $cmd="$GroupCmd verify -consistent" ;
	my $ExitCode = RunProgram ($main::RunnigHost, "$cmd") ;
	my @Res = GetCommandResult() ;
	if ( $ExitCode == 0 ){
		return 2; # Ready to split ... followed the stupid GetDGStatus exit codes 
	}
	else{ # Not consistent yet...
		foreach my $line (@Res) {
			print "$line";
		}
		return 9; 
	}
	# Not supposed to get here...
	return 9;
}

sub GetDGDiffrence($$) {
	my $GroupCmd = shift ;			chomp $GroupCmd ;
	my $Diffrence = shift ; 		chomp $Diffrence ;
	my $cmd = $GroupCmd . " query \| grep MB \| awk \'{print\$3}\'| awk -F. \'{print\$1}\'" ;
	my $ExitCode = RunProgram ($main::RunnigHost, "$cmd") ;
	my @Res = GetCommandResult() ;
	
	foreach my $line (@Res) {
		chomp $line ;
		if ($line > $Diffrence) {
			print "There are still $line MBs to SYNC... Waiting untill $Diffrence MBs";
			return 1;
		}
		else {
			return 2; # Have to use Exit Code 2 for Successefull :(
		}
	}
	# Not supposed to get here...
	return 9;
}

#-----------------------------------------------------------------------------#
# The Main package Section!
#

1;
 
